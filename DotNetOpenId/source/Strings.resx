<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AttributeAlreadyAdded" xml:space="preserve">
    <value>An attribute with type URI '{0}' has already been added.</value>
  </data>
  <data name="AttributeTooManyValues" xml:space="preserve">
    <value>Only {0} values for attribute '{1}' were requested, but {2} were supplied.</value>
  </data>
  <data name="BadAssociationPrivateData" xml:space="preserve">
    <value>The private data supplied does not meet the requirements of any known Association type.  Its length may be too short, or it may have been corrupted.</value>
  </data>
  <data name="CallDeserializeBeforeCreateResponse" xml:space="preserve">
    <value>A Simple Registration request must be deserialized before CreateResponse can be called.</value>
  </data>
  <data name="CIDVerificationFailed" xml:space="preserve">
    <value>XRI CanonicalID verification failed.</value>
  </data>
  <data name="ClaimedIdentifierMustBeSetFirst" xml:space="preserve">
    <value>The ClaimedIdentifier property must be set first.</value>
  </data>
  <data name="ClientScriptExtensionPropertyNameCollision" xml:space="preserve">
    <value>An extension with this property name ('{0}') has already been registered.</value>
  </data>
  <data name="ClientScriptExtensionTypeCollision" xml:space="preserve">
    <value>The extension '{0}' has already been registered.</value>
  </data>
  <data name="CreateRequestAlreadyCalled" xml:space="preserve">
    <value>An authentication request has already been created using CreateRequest().</value>
  </data>
  <data name="CurrentHttpContextRequired" xml:space="preserve">
    <value>HttpContext.Current is null.  There must be an ASP.NET request in process for this operation to succeed.</value>
  </data>
  <data name="EncryptionRequired" xml:space="preserve">
    <value>An encrypted session using either HTTPS or Diffie-Hellman is required when establishing associations between relying parties and providers.</value>
  </data>
  <data name="ExpectedBase64OpenIdQueryParameter" xml:space="preserve">
    <value>OpenID parameter '{0}' was expected to be base64 encoded but is not.</value>
  </data>
  <data name="ExpiredNonce" xml:space="preserve">
    <value>The nonce has expired.  It was good until {0} (UTC), and it is now {1} (UTC).  If this looks wrong, check the server's clock, time zone and daylight savings settings.</value>
  </data>
  <data name="ExplicitHttpUriSuppliedWithSslRequirement" xml:space="preserve">
    <value>URI is not SSL yet requireSslDiscovery is set to true.</value>
  </data>
  <data name="ExtensionAlreadyAddedWithSameTypeURI" xml:space="preserve">
    <value>An extension sharing namespace '{0}' has already been added.  Only one extension per namespace is allowed in a given request.</value>
  </data>
  <data name="ExtensionParameterKeysWithoutPrefixExpected" xml:space="preserve">
    <value>Extension parameter key '{0}' encountered, but extension parameter keys should not include their prefix.</value>
  </data>
  <data name="FieldMustBeSigned" xml:space="preserve">
    <value>The OpenID parameter '{0}' must be signed by the OpenID Provider, but was not.</value>
  </data>
  <data name="FragmentNotAllowedOnXRIs" xml:space="preserve">
    <value>Fragment segments do not apply to XRI identifiers.</value>
  </data>
  <data name="HttpContextRequiredForThisOverload" xml:space="preserve">
    <value>No current ASP.NET HttpContext was detected.  Use an overload that does not require one.</value>
  </data>
  <data name="IAssociationStoreRequiredWhenNoHttpContextAvailable" xml:space="preserve">
    <value>No current HttpContext was detected, so an IAssociationStore must be explicitly provided. Call the Server constructor overload that takes an IAssociationStore.</value>
  </data>
  <data name="IdentifierSelectRequiresMatchingIdentifiers" xml:space="preserve">
    <value>ClaimedIdentifier and LocalIdentifier must be the same when IsIdentifierSelect is true.</value>
  </data>
  <data name="IncompatibleAssociationAndSessionTypes" xml:space="preserve">
    <value>The Provider requested association type '{0}' and session type '{1}', which are not compatible with each other.</value>
  </data>
  <data name="InconsistentAppState" xml:space="preserve">
    <value>Inconsistent setting of application state.  Authentication request was sent with application state available, but authentication response was received without it available.  This makes it impossible to validate the token's signature and will cause assertion verification failure.</value>
  </data>
  <data name="InsecureWebRequestWithSslRequired" xml:space="preserve">
    <value>Insecure web request for '{0}' aborted due to security requirements demanding HTTPS.</value>
  </data>
  <data name="InvalidCharacterInKeyValueFormInput" xml:space="preserve">
    <value>Cannot encode '{0}' because it contains an illegal character for Key-Value Form encoding.  (line {1}: '{2}')</value>
  </data>
  <data name="InvalidKeyValueFormCharacterMissing" xml:space="preserve">
    <value>Cannot decode Key-Value Form because a line was found without a '{0}' character.  (line {1}: '{2}')</value>
  </data>
  <data name="InvalidNonce" xml:space="preserve">
    <value>The nonce was not in the expected format.</value>
  </data>
  <data name="InvalidOpenIdExtensionParameterValue" xml:space="preserve">
    <value>OpenID extension {0} parameter {1} had unexpected value '{2}'.</value>
  </data>
  <data name="InvalidOpenIdQueryParameterValue" xml:space="preserve">
    <value>OpenID parameter '{0}' had unexpected value '{1}'.</value>
  </data>
  <data name="InvalidOpenIdQueryParameterValueBadBase64" xml:space="preserve">
    <value>OpenID parameter '{0}' with value '{1}' failed to base64 decode.</value>
  </data>
  <data name="InvalidScheme" xml:space="preserve">
    <value>The scheme must be http or https but was '{0}'.</value>
  </data>
  <data name="InvalidSignature" xml:space="preserve">
    <value>The signature verification failed.</value>
  </data>
  <data name="InvalidUri" xml:space="preserve">
    <value>The value '{0}' is not a valid URI.</value>
  </data>
  <data name="InvalidXRDSDocument" xml:space="preserve">
    <value>Failure parsing XRDS document.</value>
  </data>
  <data name="InvalidXri" xml:space="preserve">
    <value>Not a recognized XRI format: '{0}'.</value>
  </data>
  <data name="IssuedAssertionFailsIdentifierDiscovery" xml:space="preserve">
    <value>The OpenId Provider issued an assertion for an Identifier whose discovery information did not match.  
Assertion endpoint info: 
{0}
Discovered endpoint info:
{1}</value>
  </data>
  <data name="KeyAlreadyExists" xml:space="preserve">
    <value>The given key '{0}' already exists.</value>
  </data>
  <data name="KeysListAndDictionaryDoNotMatch" xml:space="preserve">
    <value>The list of keys do not match the provided dictionary.</value>
  </data>
  <data name="MatchingArgumentsExpected" xml:space="preserve">
    <value>The '{0}' and '{1}' parameters must both be or not be '{2}'.</value>
  </data>
  <data name="MinimumOPVersionRequirementNotMet" xml:space="preserve">
    <value>This Relying Party requires a Provider that supports at least OpenID version {0}, but Provider is detected to only support OpenID version {1}.</value>
  </data>
  <data name="MissingCanonicalIDElement" xml:space="preserve">
    <value>The XRDS document for XRI {0} is missing the required CanonicalID element.</value>
  </data>
  <data name="MissingInternalQueryParameter" xml:space="preserve">
    <value>Query parameter '{0}' was missing from the query.</value>
  </data>
  <data name="MissingOpenIdQueryParameter" xml:space="preserve">
    <value>OpenID parameter '{0}' was missing from the query.</value>
  </data>
  <data name="MissingReturnToQueryParameter" xml:space="preserve">
    <value>Query parameter '{0}' was expected in the return_to query '{1}'.</value>
  </data>
  <data name="NoRelyingPartyEndpointDiscovered" xml:space="preserve">
    <value>No XRDS document containing OpenId relying party endpoint information could be found at {0}.</value>
  </data>
  <data name="NotSupportedByAuthenticationSnapshot" xml:space="preserve">
    <value>This operation is not supported by serialized authentication responses.  Try this operation from the LoggedIn event handler.</value>
  </data>
  <data name="OpenIdEndpointNotFound" xml:space="preserve">
    <value>No OpenId endpoint found.</value>
  </data>
  <data name="OpenIdTextBoxEmpty" xml:space="preserve">
    <value>No OpenId url is provided.</value>
  </data>
  <data name="OperationOnlyValidForSetupRequiredState" xml:space="preserve">
    <value>This operation is only allowed when IAuthenticationResponse.State == AuthenticationStatus.SetupRequired.</value>
  </data>
  <data name="PrefixWithoutPeriodsExpected" xml:space="preserve">
    <value>Prefix should not begin or end with a period.</value>
  </data>
  <data name="ProviderOpenIdVersionUnknown" xml:space="preserve">
    <value>Unable to determine provider's OpenID version.</value>
  </data>
  <data name="ProviderRespondedWithError" xml:space="preserve">
    <value>The OpenId Provider responded with an error: '{0}'.</value>
  </data>
  <data name="ProviderRespondedWithUnrecognizedHTTPStatusCode" xml:space="preserve">
    <value>The OpenId Provider responded with unrecognized HTTP status code {0}.</value>
  </data>
  <data name="RealmCausedRedirectUponDiscovery" xml:space="preserve">
    <value>An HTTP request to the realm URL ({0}) resulted in a redirect, which is not allowed during relying party discovery.</value>
  </data>
  <data name="ReplayAttackDetected" xml:space="preserve">
    <value>The nonce has already been used.</value>
  </data>
  <data name="ResponseNotReady" xml:space="preserve">
    <value>OpenId provider's response is not ready.  Use IsResponseReady to check, and fill in the required properties first.</value>
  </data>
  <data name="ReturnToArgDifferentFromQueryArg" xml:space="preserve">
    <value>The '{0}' parameter does not have the same value for return_to ('{1}') and the regular query ('{2}').</value>
  </data>
  <data name="ReturnToNotUnderRealm" xml:space="preserve">
    <value>return_to '{0}' not under realm '{1}'.</value>
  </data>
  <data name="ReturnToParamDoesNotMatchRequestUrl" xml:space="preserve">
    <value>The {0} parameter ({1}) does not match the actual URL ({2}) the request was made with.</value>
  </data>
  <data name="TamperingDetected" xml:space="preserve">
    <value>The '{0}' parameter was expected to have the value '{1}' but had '{2}' instead.</value>
  </data>
  <data name="TooManyRedirects" xml:space="preserve">
    <value>The maximum allowable number of redirects were exceeded while requesting '{0}'.</value>
  </data>
  <data name="TypeMustImplementX" xml:space="preserve">
    <value>The type must implement {0}.</value>
  </data>
  <data name="UnsafeWebRequestDetected" xml:space="preserve">
    <value>The URL '{0}' is rated unsafe and cannot be requested this way.</value>
  </data>
  <data name="UnspecifiedDateTimeKindNotAllowed" xml:space="preserve">
    <value>Providing a DateTime whose Kind is Unspecified is not allowed.</value>
  </data>
  <data name="WebRequestFailed" xml:space="preserve">
    <value>Web request to '{0}' failed.</value>
  </data>
  <data name="XriResolutionFailed" xml:space="preserve">
    <value>XRI resolution failed.</value>
  </data>
  <data name="XriResolutionStatusMissing" xml:space="preserve">
    <value>Could not find XRI resolution Status tag or code attribute was invalid.</value>
  </data>
  <data name="SregInvalidBirthdate" xml:space="preserve">
    <value>Invalid birthdate value.  Must be in the form yyyy-MM-dd.</value>
  </data>
  <data name="ClaimedIdentifierCannotBeSetOnDelegatedAuthentication" xml:space="preserve">
    <value>The ClaimedIdentifier property cannot be set when IsDelegatedIdentifier is true to avoid breaking OpenID URL delegation.</value>
  </data>
</root>
